# -*- fill-column: 72; -*-
#+title: Emacs initialisation
#+startup: overview

* Package management

#+begin_src emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

The library [[https://github.com/jwiegley/use-package][=use-package=]] provides a convenient way to configure other
packages. See, e.g.,
https://ianyepan.github.io/posts/setting-up-use-package/. The option
~use-package-always-ensure~ means that packages that are required but
not installed will be downloaded and installed automatically.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src


* Authentication

At present, the secrets file is used only for magit forge. Its location
has been set according to the [[https://magit.vc/manual/ghub/Storing-a-Token.html][ghub documentation]].
#+begin_src emacs-lisp
  (setq auth-sources '("~/.authinfo"))
#+end_src


* Environment

Apparently ~exec-path-from-shell~ is no longer required. (Or so Emacs
tells me.)
#+begin_src emacs-lisp
  ;; (use-package exec-path-from-shell
  ;;   :config 
  ;;   (exec-path-from-shell-initialize))
#+end_src


* Whoami

#+begin_src emacs-lisp
  (setq user-mail-address "jgeddes@turing.ac.uk")
#+end_src


* Look and feel

** MacOS modifier keys

#+begin_src emacs-lisp
  (setq ns-alternate-modifier 'none)
  (setq ns-command-modifier 'meta)
#+end_src

** Movement and editing

#+begin_src emacs-lisp
  ;; Typing deletes selection
  (delete-selection-mode 1)
  ;; M-` moves between frames
  (global-set-key (kbd "M-`") 'next-multiframe-window) 
#+end_src

** Typography

Visual fill column mode wraps lines at ~fill-column~ in
~visual-line-mode~. The package ~adaptive-wrap~ indents subsequent lines
of paragraphs according to the first line.
#+begin_src emacs-lisp
  (use-package visual-fill-column)
  (use-package adaptive-wrap)
#+end_src

#+begin_src emacs-lisp
  (setq-default left-margin-width 1 right-margin-width 1)

  (setq default-frame-alist
        '((left-fringe . 16)
          (right-fringe . 16)
          (width . 102)
          (height . 50)))

  (tool-bar-mode -1)

  (setq fill-column 102)
  (setq frame-background-mode 'dark)
  (setq fringe-mode '(nil . 0))

  (setq-default line-spacing 0.2)

  (setq truncate-string-ellipsis "…")
#+end_src

** Custom themes

#+begin_src emacs-lisp
  (use-package color-theme-sanityinc-solarized)
  (load-theme 'sanityinc-solarized-dark t)
#+end_src




* Org mode (inc. task management)

** General setup
#+begin_src emacs-lisp
  ;; Enable orgtbl-mode minor mode
  (require 'org-table)

  ;; Turn on syntax highlighting in src blocks
  (setopt org-src-fontify-natively t)

  ;; Defaults for Getting Things Done
  (setopt org-agenda-files '("~/Documents/GtD/work/" "~/Documents/GtD/inbox.org")) 
  (setopt org-default-notes-file "~/Documents/GtD/inbox.org")

  ;; Make org functions available outside org-mode as recommended by the
  ;; Org manual section 1.3
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
#+end_src

** Language support provided by org-babel

See https://orgmode.org/worg/org-contrib/babel/languages/index.html for
customisation for each supported language.
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)))

  ;; See code evaluation and security issues in the org manual
  (setq org-confirm-babel-evaluate nil)
#+end_src

I did add a minor mode for presentations here but in fact patat works
very well.

** LaTeX export configuration

Use =engraved= mode for syntax highlighting in LaTeX. 
#+begin_src emacs-lisp
  (use-package engrave-faces)
  (setq org-latex-src-block-backend 'engraved)
#+end_src

** Publishing my blog

Load the definitions of the html-tufte backend.
#+begin_src emacs-lisp
(let ((f (expand-file-name "ox-html-tufte.el" user-emacs-directory)))
  (load f))
#+end_src

#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

#+begin_src emacs-lisp
  (setq org-publish-project-alist
	'(("blog"
	   :base-directory "~/Projects/triangle-man.github.io/src"
	   :publishing-function org-html-publish-to-html-tufte
	   :publishing-directory "~/Projects/triangle-man.github.io/docs"
	   :auto-sitemap t ; Manually copy the table of contents into index.org
	   :sitemap-filename "sitemap.org"
	   :exclude "sitemap.org"
	   :html-link-home "index.html"
	   :sitemap-title "The Armchair Programmer"
	   :sitemap-date-format "%d %b %Y"
	   :date-format "%d %B %Y"
	   :table-of-contents nil
           :section-numbers nil
	   ; html customisation
	   ; :html-container -- TODO: fix to match original tufte.css
	   :html-metadata-timestamp-format "%d %B %Y"
	   :html-head-include-default-style nil
	   :html-head "<link rel=\"stylesheet\" href=\"tufte.css\" type=\"text/css\"/>"
	   :html-footnote-format "<label for=\"%1$s\" class=\"margin-toggle sidenote-number\">
</label><input type=\"checkbox\" id=\"%1$s\" class=\"margin-toggle\"/>"
	   :html-footnote-separator ", "
	   :html-footnotes-section "" ; Do not insert a footnote section
	   :htmlized-source t ; What is this for?
	   )))  
#+end_src

*** Notes on GitHub Pages

See [[https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages][the GitHub Pages documentation]].

To publish without using Jekyll, include an empty file called
=.nojekyll= in the source directory. The source directory is either the
root of repository or =/docs=: choose which in Settings on GitHub.





* Programming language support

** Asymptote

Asymptote's emacs file is not available from the package archive,
annoyingly, but has to be found in the local asymptote installation.

#+begin_src emacs-lisp
    (add-to-list 'load-path
		 (substitute-in-file-name "$HOMEBREW_PREFIX/share/asymptote"))
    (autoload 'asy-mode "asy-mode.el" "Asymptote major mode." t)
    (autoload 'lasy-mode "asy-mode.el" "hybrid Asymptote/Latex major mode." t)
    (autoload 'asy-insinuate-latex "asy-mode.el" "Asymptote insinuate LaTeX." t)
    (add-to-list 'auto-mode-alist '("\\.asy$" . asy-mode))
#+end_src

** Assembly

ARM assembly uses the “@” character as a comment.
#+begin_src emacs-lisp
  (setq asm-comment-char 64)
#+end_src

** Company

#+begin_src emacs-lisp
  (use-package company
    :config (global-company-mode))
#+end_src

** Flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+end_src

** Git

#+begin_src emacs-lisp 
 (use-package magit
    :init (setq magit-define-global-key-bindings 'recommended))
  (use-package forge)
#+end_src

** Lisp

Paredit provides structured editing support for lisps. 
#+begin_src emacs-lisp
(use-package paredit
  :ensure t
  :config
  (dolist (m '(emacs-lisp-mode-hook
	       racket-mode-hook
	       geiser-mode-hook
	       ; racket-repl-mode-hook ; refuses to enter expressions -- JG
	       ))
    (add-hook m #'paredit-mode))
  (bind-keys :map paredit-mode-map
	     ("{"   . paredit-open-curly)
	     ("}"   . paredit-close-curly))
  (unless terminal-frame
    (bind-keys :map paredit-mode-map
	       ("M-[" . paredit-wrap-square)
	       ("M-{" . paredit-wrap-curly))))
#+end_src

#+begin_src emacs-lisp
  (use-package racket-mode
    :hook (racket-mode . racket-xp-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package geiser-guile)
#+end_src

Minor mode to change the face of parentheses.
#+begin_src emacs-lisp
  (use-package paren-face
    :config
    (setq paren-face-regexp (rx (any "()[]{}")))
    (add-to-list 'paren-face-modes 'racket-mode)
    (add-to-list 'paren-face-modes 'racket-repl-mode)
    (global-paren-face-mode))
#+end_src

** Maxima

#+begin_src emacs-lisp
  (use-package maxima
    :init
    (add-hook 'maxima-mode-hook #'maxima-hook-function)
    (add-hook 'maxima-inferior-mode-hook #'maxima-hook-function)
    (setq
     org-format-latex-options (plist-put org-format-latex-options :scale 2.0)
     maxima-display-maxima-buffer nil)
    :mode ("\\.mac\\'" . maxima-mode)
    :interpreter ("maxima" . maxima-mode))
#+end_src

** Nix
#+begin_src emacs-lisp
  (use-package nix-mode)
#+end_src

** OCaml
#+begin_src emacs-lisp
  (use-package tuareg
    :ensure t)

  ;; Instructed to add this by `opam install tuareg`:
  (let ((local-tuareg-site-file "/Users/jgeddes/.opam/default/share/emacs/site-lisp/tuareg-site-file"))
    (when (file-exists-p local-tuareg-site-file)
      (load local-tuareg-site-file)))
#+end_src

#+begin_src emacs-lisp
  (use-package merlin
    :ensure t
    :config
     (add-hook 'tuareg-mode-hook 'merlin-mode t)
     (add-hook 'merlin-mode-hook #'company-mode t))
  
  ;; Instructed to add this by `opam install merlin`:
(let ((opam-share (ignore-errors (car (process-lines "opam" "var" "share")))))
  (when (and opam-share (file-directory-p opam-share))
    ;; Register Merlin
    (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
    (autoload 'merlin-mode "merlin" nil t nil)
    ;; Automatically start it in OCaml buffers
    ;; (add-hook 'tuareg-mode-hook 'merlin-mode t)
    (add-hook 'caml-mode-hook 'merlin-mode t)
    ;; Use opam switch to lookup ocamlmerlin binary
    (setq merlin-command 'opam)))
#+end_src

Utop is an alternative REPL.
#+begin_src emacs-lisp
  (use-package utop
        :ensure t
        :config
        (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
        (add-hook 'tuareg-mode-hook 'utop-minor-mode)
	(setq utop-command "opam config exec -- utop -emacs"))
#+end_src

** OpenCL

#+begin_src emacs-lisp
  (use-package opencl-c-mode
    :ensure t)
#+end_src

** Polymode

#+begin_src emacs-lisp
  (use-package polymode)
  (use-package poly-markdown)
  (use-package poly-R)
  (use-package poly-org)
#+end_src

** Python

#+begin_src emacs-lisp
  (setq org-babel-python-command "python3")
  (use-package elpy
    :ensure t
    :init (elpy-enable))
#+end_src

** Quarto

#+begin_src emacs-lisp
  (use-package quarto-mode)
  (use-package request)
#+end_src

** R

#+begin_src emacs-lisp
  (use-package ess)
#+end_src


* Tools

** Ledger
#+begin_src emacs-lisp
  (use-package ledger-mode)
#+end_src
  
** Gnuplot
#+begin_src emacs-lisp
  (use-package gnuplot)
#+end_src


* Text modes

#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :hook (TeX-mode . prettify-symbols-mode)
    :config
    (setq TeX-parse-self t) ; Enable parse on load.
    (setq TeX-auto-save t) ; Enable parse on save.
    )
    #+end_src

#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'latex-mode-hook 'prettify-symbols-mode)
  
(setq ispell-dictionary "british")
  (setq ispell-program-name "aspell")
#+end_src

#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src

#+begin_src emacs-lisp
  (use-package csv-mode)
#+end_src

